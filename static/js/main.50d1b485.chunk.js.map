{"version":3,"sources":["App.js","serviceWorker.js","Store/Reducer.js","index.js"],"names":["App","className","this","props","age","onClick","onAgeUp","onAgeDown","array","map","item","key","id","onDelItem","Component","connect","state","dispatch","type","value","Boolean","window","location","hostname","match","initialState","Reducer","action","newState","concat","uuid","filter","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAIMA,E,iLACK,IAAD,OACR,OAEE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,eAEjB,yBAAKA,UAAU,OAAf,YAA8B,8BAAOC,KAAKC,MAAMC,MAChD,4BAAQH,UAAU,QAAQI,QAASH,KAAKC,MAAMG,SAA9C,UACC,4BAAQL,UAAU,UAAUI,QAASH,KAAKC,MAAMI,WAAhD,YACA,6BACA,yBAAKN,UAAY,cAAjB,UACA,4BACGC,KAAKC,MAAMK,MAAMC,IAAI,SAACC,GACpB,OACC,wBAAIT,UAAY,YAAWU,IAAKD,EAAKE,GACrCP,QAAS,WAAK,EAAKF,MAAMU,UAAUH,EAAKE,MACvCF,EAAKN,c,GAjBFU,aA4CHC,cAhBS,SAACC,GACvB,MAAM,CACJZ,IAAIY,EAAMZ,IACVI,MAAMQ,EAAMR,QAKU,SAACS,GACzB,MAAM,CACJX,QAAQ,kBAAIW,EAAS,CAACC,KAAK,SAASC,MAAM,KAC1CZ,UAAU,kBAAIU,EAAS,CAACC,KAAK,WAAWC,MAAM,KAC9CN,UAAU,SAACD,GAAD,OAAMK,EAAS,CAACC,KAAK,WAAWC,MAAMP,OAIrCG,CAA4Cf,GCpCvCoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,slBChBN,IAAMC,EAAe,CACpBrB,IAAI,GACJI,MAAM,IAkCQkB,EA9BC,WAA8B,IAA7BV,EAA4B,uDAAtBS,EAAaE,EAAS,uCACtCC,EAAQ,KAAOZ,GACrB,OAAOW,EAAOT,MACb,IAAK,SACH,OAAO,EAAP,GACIU,EADJ,CAECxB,IAAIwB,EAASxB,IAAMuB,EAAOR,MAC1BX,MAAMoB,EAASpB,MAAMqB,OAAO,CAACjB,GAAGkB,MAAO1B,IAAIwB,EAASxB,IAAMuB,EAAOR,UAInE,IAAK,WACL,OAAO,EAAP,GACKS,EADL,CAEExB,IAAIwB,EAASxB,IAAMuB,EAAOR,MAC1BX,MAAMoB,EAASpB,MAAMqB,OAAO,CAACjB,GAAGkB,MAAO1B,IAAIwB,EAASxB,IAAMuB,EAAOR,UAElE,IAAK,WACN,OAAO,EAAP,GACKS,EADL,CAEEpB,MAAMoB,EAASpB,MAAMuB,OAAO,SAAArB,GAAI,OAAGA,EAAKE,KAAOe,EAAOR,UAEvD,QACA,OAAOS,ICtBLI,EAAQC,YAAYP,GAE1BQ,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAQA,GAAO,kBAAC,EAAD,OAAoBI,SAASC,eAAe,SFsH/E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.50d1b485.chunk.js","sourcesContent":["import React ,{Component }from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n  render(){\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n       <div className='age'>Your Age:<span>{this.props.age}</span></div>\n       <button className='ageUp' onClick={this.props.onAgeUp}>Age Up</button>\n        <button className='ageDown' onClick={this.props.onAgeDown}>Age Down</button>\n        <hr />\n        <div className = 'arrayItems'>History \n        <ul>\n          {this.props.array.map((item)=>{\n             return (  \n              <li className = 'arrayList'key={item.id} \n              onClick={()=>{this.props.onDelItem(item.id)}}>\n              {item.age}</li>\n              )\n          })\n          }\n        </ul>\n        </div>\n    </div>\n  );\n}\n}\n\nconst mapStateToProps = (state)=>{\n  return{\n    age:state.age,\n    array:state.array\n   \n  };\n}\n\nconst mapDispatchToProps =(dispatch) =>{\n  return{\n    onAgeUp:()=>dispatch({type:\"AGE_UP\",value:1}),\n    onAgeDown:()=>dispatch({type:\"AGE_DOWN\",value:1}),\n    onDelItem:(id)=>dispatch({type:\"DEL_ITEM\",value:id}),\n\n  };\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import uuid from 'uuid'\n\nconst initialState = {\n\tage:21,\n\tarray:[]\n}\n\n\nconst Reducer = (state=initialState,action)=>{\n const newState = {...state}\n switch(action.type){\n \tcase \"AGE_UP\":\n    return {\n    \t...newState,\n    \tage:newState.age + action.value,\n    \tarray:newState.array.concat({id:uuid(),age:newState.age + action.value})\n    }\n  \n\n  \tcase \"AGE_DOWN\":\n  \treturn {\n    \t...newState,\n    \tage:newState.age - action.value,\n    \tarray:newState.array.concat({id:uuid(),age:newState.age - action.value})\n    }\n    case \"DEL_ITEM\":\n  \treturn {\n    \t...newState,\n    \tarray:newState.array.filter(item =>item.id !== action.value)\n    }\n    default:\n    return newState;\n  }\n\n\n}\n\n\nexport default Reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider} from 'react-redux';\nimport { createStore} from 'redux';\nimport Reducer from './Store/Reducer';\n\nconst store = createStore(Reducer);\n\nReactDOM.render(<Provider store ={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}